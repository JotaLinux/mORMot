unit CustomModels;

interface

uses
  SynCommons,
  mORMot,
  SynDB,
  SynDBDataset,  
  {ToDo: Para uso futuro com outros drivers}
  //  SynDBOracle,
  // SynDBSQLite3, 
  //SynSQLite3Static,
  //SynOleDB,
  //SynDBODBC,
  SynDBFireDAC,
  FireDAC.Phys.MySQL, 
  System.Classes,
  BasicTypes;

     
type
  TSQLRecordTimeStamped = class(TSQLRecord)
  private
    fCreatedAt: TCreateTime;
    fModifiedAt: TModTime;
  published
    property CreatedAt: TCreateTime read fCreatedAt write fCreatedAt;
    property ModifiedAt: TModTime read fModifiedAt write fModifiedAt;
  end;

  TPerson = class(TSQLRecordTimeStamped) // TSQLRecord has already ID: integer primary key
  private
    fName: RawUTF8;
  published
    /// ORM will create a NAME VARCHAR(80) column
    property Name: RawUTF8 index 80 read fName write fName; 
  end;
  //Corresponde a tabela tb_perfil
  TSQLRecordDefaultParams = class(TSQLRecordTimeStamped)
    private           
      fID : TID;
      fTipo     :Integer;
      fResposta :RawUTF8;
      fValor    :RawUTF8;
      fOrdem    :Integer;
      //autenticacao
      fHashedPassword: RawUTF8;
      fLogonName: RawUTF8;    
		  fRights: TSQLEmpresaRights;   
      fPerson: TPerson;
     
    published
      //property ID:TID read fID write fID;
      property Tipo:Integer read fTipo write fTipo;
      
      property Ordem:Integer read fOrdem write fOrdem;
      property Resposta:RawUTF8 index 120 read fResposta write fResposta;
      property Valor:RawUTF8 index 1 read fResposta write fResposta;
      property Rigths: TSQLEmpresaRights read fRights write fRights;
      property HashedPassword: RawUTF8 index 64 read fHashedPassword write fHashedPassword;
	    property LogonName: RawUTF8 index 30 read fLogonName write fLogonName stored AS_UNIQUE;
      property Person: TPerson read fPerson write fPerson;
  end;
  type
  /// releases Table
  // - type definition auto-generated by SynDBExplorer 1.18.2194 at 2016-03-31 19:03:52
  // from releases
  // - note that the ORM will add one missing ID field via:
  // $ ALTER TABLE releases ADD ID int NOT NULL
  TSQLreleases = class(TSQLRecord)
  protected
    fchave: Int64;
    fDatahorarioBaixa: TDateTime;
    fDatahorarioExecucao: TDateTime;
    fprioridade: Int64;
    fconcluido: Int64;
    fErros: Int64;
    fReleaseNotes: RawUTF8;
    fTemtabelaCom: Int64;
    fTemROBO: Int64;
    fTemQUERY: Int64;
    fTemIMAGEM: Int64;
    fTemJS: Int64;
    fTipotabelaCom: Int64;
    fTipoROBO: Int64;
    fTipoQUERY: Int64;
    fTipoIMAGEM: Int64;
    fTipoJS: Int64;
    fSERVIDOR: RawUTF8;
  published
    /// match releases.chave [int 11 0 0] *
    property chave: Int64 read fchave write fchave;
    /// match releases.DatahorarioBaixa [datetime 19 0 0]
    property DatahorarioBaixa: TDateTime read fDatahorarioBaixa write fDatahorarioBaixa;
    /// match releases.DatahorarioExecucao [datetime 19 0 0]
    property DatahorarioExecucao: TDateTime read fDatahorarioExecucao write fDatahorarioExecucao;
    /// match releases.prioridade [int 10 0 0]
    property prioridade: Int64 read fprioridade write fprioridade;
    /// match releases.concluido [int 1 0 0]
    property concluido: Int64 read fconcluido write fconcluido;
    /// match releases.Erros [int 1 0 0]
    property Erros: Int64 read fErros write fErros;
    /// match releases.ReleaseNotes [text 65535 0 0]
    property ReleaseNotes: RawUTF8 index 65535 read fReleaseNotes write fReleaseNotes;
    /// match releases.TemtabelaCom [int 1 0 0]
    property TemtabelaCom: Int64 read fTemtabelaCom write fTemtabelaCom;
    /// match releases.TemROBO [int 1 0 0]
    property TemROBO: Int64 read fTemROBO write fTemROBO;
    /// match releases.TemQUERY [int 1 0 0]
    property TemQUERY: Int64 read fTemQUERY write fTemQUERY;
    /// match releases.TemIMAGEM [int 1 0 0]
    property TemIMAGEM: Int64 read fTemIMAGEM write fTemIMAGEM;
    /// match releases.TemJS [int 1 0 0]
    property TemJS: Int64 read fTemJS write fTemJS;
    /// match releases.TipotabelaCom [int 1 0 0]
    property TipotabelaCom: Int64 read fTipotabelaCom write fTipotabelaCom;
    /// match releases.TipoROBO [int 1 0 0]
    property TipoROBO: Int64 read fTipoROBO write fTipoROBO;
    /// match releases.TipoQUERY [int 1 0 0]
    property TipoQUERY: Int64 read fTipoQUERY write fTipoQUERY;
    /// match releases.TipoIMAGEM [int 1 0 0]
    property TipoIMAGEM: Int64 read fTipoIMAGEM write fTipoIMAGEM;
    /// match releases.TipoJS [int 1 0 0]
    property TipoJS: Int64 read fTipoJS write fTipoJS;
    /// match releases.SERVIDOR [varchar 2000 0 0]
    property SERVIDOR: RawUTF8 index 2000 read fSERVIDOR write fSERVIDOR;
  end;


  TSQLMenuPrincipal = class(TSQLRecordTimeStamped)
    protected
      FProdutorId: Integer;
	    FEmpresaId: Integer;
	    FUnidade: Integer;
      FGrupoId: Integer;
	    //items - flat baseado na hieraquia do ParentId
		  Fparentid: Integer;
		  FDescricao: RawUTF8;
		  FSubMenuWidth: Integer; //in px
		  FUrl: RawUTF8; //uri de execucao
		  FDataField: RawUTF8; //Campo para validacao de permissao . uso futuro
		  FVisible: Boolean;
    published
      property ProdutorId  : Integer read FProdutorId    write FProdutorId  ;
	    property EmpresaId   : Integer read FEmpresaId     write FEmpresaId   ;
	    property Unidade     : Integer read FUnidade       write FUnidade     ;
      property GrupoId     : Integer read FGrupoId       write FGrupoId     ;
		  property parentid    : Integer read Fparentid      write Fparentid    ;
		  property Descricao   : RawUTF8 read FDescricao     write FDescricao   ;
		  property SubMenuWidth: Integer read FSubMenuWidth  write FSubMenuWidth;
		  property Url         : RawUTF8 read FUrl           write FUrl         ; 
		  property DataField   : RawUTF8 read FDataField     write FDataField   ; 
		  property Visible     : Boolean read FVisible       write FVisible     ;    
  end;


    
    
  
function InitDataModel: TSQLModel;

implementation
function InitDataModel: TSQLModel;
begin
  result := TSQLModel.Create([
//  TPerson, 
 // TSQLRecordDefaultParams
//  TSQLreleases,
//  TSQLacessorios,
//  TSQLCalculo,
//  TSQLCalculoAnexos,
//  TSQLCalculoDCCCCRED,
//  TSQLCalculoSenha
  (**TSQLunidade,
  TSQLUnidadeKMMinMax,
  TSQLUnidadeFixa,
  TSQLUnidadeTPU,
  TSQLUnidadeRepasses,   
  TSQLUnidadeVWDN,
  TSQLUnidadeSAS,
  TSQLUnidadeAGF,  
  TSQLusuario,
  **)
  TSQLMenuPrincipal
  ],
  SERVER_ROOT);
 
//  TPerson.AddFilterOrValidate('Name',TSynValidateText.Create); // ensure exists
//  TSQLRecordDefaultParams.AddFilterOrValidate('Resposta',TSynValidateText.Create); // ensure existsResposta
//  TSQLRecordDefaultParams.AddFilterOrValidate('Valor',TSynValidateText.Create); // ensure existsValor
end;

end.
